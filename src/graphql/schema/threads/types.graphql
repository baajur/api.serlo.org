type Thread {
    id: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
    title: String!
    archived: Boolean!
    trashed: Boolean!
    object: AbstractUuid! # Shouldn't that be named author?
    comments (
        after: String
        before: String
        first: Int
        last: Int
    ): CommentConnection!
}

type CommentConnection {
    edges: [CommentEdge!]!
    nodes: [Comment!]!  # List of comments
    totalCount: Int!
    pageInfo: PageInfo!
}

type CommentEdge {
    cursor: String!
    node: Comment!
}

type Comment {
    id: Int!
    content: String!
    createdAt: DateTime!
    author: User!
}

type ThreadsConnection {
    edges: [ThreadsCursor!]!
    nodes: [Thread!]!
    totalCount: Int!
    pageInfo: PageInfo!
}

type ThreadsCursor {
    cursor: String!
    node: Thread!
}

# TODO: Mutation erg√§nzen
#extend type Mutation {
#    createThread(
#        createdAt: DateTime!
#        updatedAt: DateTime!
#        title: String!
#        objectId: Int!
#        content: String!
#    ): Thread
#}
